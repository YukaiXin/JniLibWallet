/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "com_iyich_wallet_lib_jni_FastModeJNI.h"
#include "bleProtocols/fastmode.c"
#include "package_type.h"
#include <stdio.h>
#include <stdlib.h>

#include <android/log.h>
#include <iostream>

#define LOG_TAG "System.out"
#define LOGD(...) __android_log_print(ANDROID_LOG_DEBUG, LOG_TAG, __VA_ARGS__)
#define LOGI(...) __android_log_print(ANDROID_LOG_INFO, LOG_TAG, __VA_ARGS__)

/* Header for class com_iyich_wallet_lib_jni_FastModeJNI */
JavaVM *jvm;
//JNIEnv *_env;
jobject gobal_obj;

bool receiveBuff(int pos,unsigned char *data, int len){

    JNIEnv* _env;
    int envStatus = jvm->GetEnv(reinterpret_cast<void **>(&_env), JNI_VERSION_1_6);
    if(envStatus == JNI_EDETACHED){
        LOGI("============== GetEnv: not attached  ");
        if (jvm->AttachCurrentThread(&_env, NULL) != 0) {
            LOGI(" ================================== Attach fail ! !!!  ");
            return false;
        }
        goto OK;
    } else if(envStatus == JNI_OK){
        goto OK;
    } else if(envStatus == JNI_EVERSION){
        LOGI(" ==================================   JNI Version not support !!!   ");
        return false;
    }

    OK:
    jbyteArray dataArray =  _env -> NewByteArray(len);
    _env->SetByteArrayRegion(dataArray, 0, len, reinterpret_cast<const jbyte *>(data));
    jbyte * jbyteP = _env->GetByteArrayElements(dataArray, 0);
    jclass fastClass = _env ->GetObjectClass(gobal_obj);

    jmethodID jmethodID1 = _env->GetMethodID(fastClass, "RecieveBuff", "([BI)V");
    _env->CallVoidMethod(gobal_obj, jmethodID1, dataArray, len);

    _env ->ReleaseByteArrayElements(dataArray, jbyteP,  JNI_ABORT);
    return false;
}



bool sendBuff(unsigned char*data, int len){

    JNIEnv* _env;
    int envStatus = jvm->GetEnv(reinterpret_cast<void **>(&_env), JNI_VERSION_1_6);
    if(envStatus == JNI_EDETACHED){
        LOGI(" ==============GetEnv: not attached  ");
        if (jvm->AttachCurrentThread(&_env, NULL) != 0) {
            LOGI(" ================================== Attach fail ! !!!  ");
            return false;
        }
        goto OK;
    } else if(envStatus == JNI_OK){
        LOGI(" ============= JNI_OK 111 !!!  ");
        goto OK;
    } else if(envStatus == JNI_EVERSION){
        LOGI(" ==================================   JNI Version not support !!!   ");
        return false;
    }

    OK:
    jbyteArray dataArray =  _env -> NewByteArray(len);
    _env->SetByteArrayRegion(dataArray, 0, len, reinterpret_cast<const jbyte *>(data));
    jbyte * jbyteP = _env->GetByteArrayElements(dataArray, 0);

    jclass fastClass = _env ->GetObjectClass(gobal_obj);
    jmethodID jmethodID1 = _env->GetMethodID(fastClass, "SendBuff", "([B)V");
    _env->CallVoidMethod(gobal_obj, jmethodID1, dataArray);

    _env ->ReleaseByteArrayElements(dataArray, jbyteP,  JNI_ABORT);

    return true;
}


/*
 * Class:     com_iyich_wallet_lib_jni_FastModeJNI
 * Method:    sendData
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_com_iyich_wallet_lib_jni_FastModeJNI_sendData
(JNIEnv *env, jobject jobj, jbyteArray data, jint len){

    env->GetJavaVM(&jvm);
    gobal_obj = env->NewGlobalRef(jobj);

    unsigned char* buffer = reinterpret_cast<unsigned char *>(env->GetByteArrayElements(data, 0));
    return onSendBlock(buffer, len, sendBuff);
}



/*
 * Class:     com_iyich_wallet_lib_jni_FastModeJNI
 * Method:    onReceive
 * Signature: ([BI)Z
 */
JNIEXPORT jboolean JNICALL Java_com_iyich_wallet_lib_jni_FastModeJNI_onReceive
(JNIEnv *env, jobject jobj, jbyteArray data, jint len){
    gobal_obj = env->NewGlobalRef(jobj);
    unsigned char* buffer = reinterpret_cast<unsigned char *>(env->GetByteArrayElements(data, 0));
    return onMRecieve(buffer, len, sendBuff, receiveBuff);
}

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void** reserved){

}



